import time
### 找零钱问题
def dfs(aim,penny,start):
    end = len(penny)-1
    count = 0
    if start>=end+1:
        return 1 if aim == 0 else 0
    i = 0
    while True:
        t = aim - penny[start] * i
        if t < 0:
            break
        count += dfs(t, penny, start + 1)
        i += 1
    return count

def dfs_memory(aim,penny,start,m):
    end = len(penny) - 1
    count = 0
    if start >= end + 1:
        return 1 if aim==0 else 0
    if m[start][aim]!=0:
        return 0 if m[start][aim]==-1 else m[start][aim]
    i = 0
    while True:
        t = aim - penny[start] * i
        if t < 0:
            break
        if m[start+1][t]!=0:
            if m[start+1][t]==-1:
                count+=0
            else:
                count+=m[start+1][t]
        else:
            count += dfs_memory(t, penny, start + 1,m)
        i += 1
    m[start][aim]=-1 if count==0 else count
    return count

def find_penny(aim,penny):
    map = [[]]*len(penny)
    for i in range(len(map)):
        map[i] = [0]*(aim+1)
    for i in range(aim+1):
        if i%penny[0]==0:
            map[0][i] = 1
    for i in range(len(map)):
        map[i][0] = 1
    for i in range(1,len(map)):
        for j in range(1,aim+1):
            map[i][j] = map[i-1][j]+map[i][j-penny[i]]
    return map[len(penny)-1][aim]

aim = 100
penny = [1,2,5]
m = [[]]*(len(penny)+1)
for i in range(len(penny)+1):
    m[i]=[0]*(aim+1)
print(dfs_memory(aim,penny,0,m))
print(find_penny(aim,penny))

res = float("inf")
m = [[1,3,5,9],[8,1,3,4],[5,0,6,1],[8,8,4,0]]
visit = [[]]*len(m)
for i in range(len(visit)):
    visit[i] = [0]*len(m[0])
path = []
def find_path(nums,rows,cols,row,col,path,visit,s):
    global  res
    if row>=0 and row<=rows and col>=0 and col<=cols and visit[row][col]!=1:
        visit[row][col] = 1
        s = s+nums[row][col]
        path.append(nums[row][col])
        if row == rows and col == cols:
            res = min(res,sum(path))
            print(path,res)
        find_path(nums,rows,cols,row,col+1,path,visit,s)
        find_path(nums, rows, cols, row+1, col,path,visit,s)
        path.pop()
        visit[row][col] = 0
